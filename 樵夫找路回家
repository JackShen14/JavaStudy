有一個樵夫，他想要穿過一個四邊形的樹林回家。

一開始他的位置在樹林的左上方，家則是在右下方，但是他必須砍倒路途上遇到的每一棵樹才能通過。

比如說，這是某個樹林的樣子

0, 3, 3
1, 1, 3
3, 1, 0
每個位置的數字代表那裡有幾顆樹，若是3的話，代表樵夫必須砍倒3顆樹才能通過。
除了左上方（出發點）以及右下方（家）的數量是0，其他的位置都有樹。

這個樵夫他有個怪僻，他只能夠往下或者往右前進，比如說，如果在出發點的時候，他只能選擇往下（到1的點），或者是往右（到3的點），也不能夠往斜的方向前進。

因為砍每棵樹都需要花時間，請幫這個樵夫算算看，他最少至少需要砍倒幾棵樹，才能最快回到家。

輸入值

matrix, 數字的二維陣列，代表的是樹林的分佈

比如說

一個3*3的樹林:
  0, 3, 3
  1, 1, 3
  3, 1, 0

是以 [[0,3,3],[1,1,3],[3,1,0]] 來表示

每個數字大小介於1到10之間(包含1和10)
回傳值

最少需要砍倒的樹木數量(int)
例如：

matrix = [[0,3,3],[1,1,3],[3,1,0]]
回傳值為3

matrix = [[0, 1], [1, 0]]
回傳值為1


*********************************************  solution  ******************************************
public class Solution {
	
    private int MIN_SIZE = Integer.MAX_VALUE;

    public int minimumTrees(int[][] matrix) {
    	minimumTrees(matrix, 0, 0, 0);
    	return MIN_SIZE;
    }
    
    public void minimumTrees(int[][] matrix, int sum, int x, int y) {
        // break
    	boolean isDestination = (x == matrix.length-1) && (y == matrix[0].length-1);
    	boolean isOutOfBound = (x > matrix.length-1) || (y > matrix[0].length-1);
    	if (isDestination && MIN_SIZE > sum) {
    		MIN_SIZE = sum;
        // recursive
    	} else if (!isOutOfBound) {
    		int currentValue = matrix[x][y];
    		int newSum = sum + currentValue;
    		minimumTrees(matrix, newSum, x+1, y);
    		minimumTrees(matrix, newSum, x, y+1);
    	}
    }

}


******************************************* Executor  *****************************************
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Executor {
    
    public int[][] stringToTwoDimIntArray(String input) {
        List<List<Integer>> lists = new ArrayList<>();
        input = input.replaceAll("^\\[\\s*\\[\\s*", "").replaceAll("\\s*\\]\\s*\\]$", "");
        for (String arrayInput: input.split("\\s*\\]\\s*,\\s*\\[\\s*")) {
            List<Integer> list = new ArrayList<>();
            for (String element: arrayInput.split("\\s*,\\s*")) {
                list.add(Integer.valueOf(element));
            }
            lists.add(list);
        }

        int[][] result = new int[lists.size()][];
        for (int i = 0; i < lists.size(); i++) {
            List<Integer> list = lists.get(i);
            int[] subEle = new int[list.size()];
            for (int j = 0; j < list.size(); j++) {
                subEle[j] = list.get(j);
            }
            result[i] = subEle;
        }
        return result;
    }
    
    
    public int toString(int result) {
        return result;
    }
    
    public static void main(String[] args) throws IOException {
        Executor executor = new Executor();
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        String line;
        while ((line = in.readLine()) != null) {
            int[][] input0 = executor.stringToTwoDimIntArray(line);

            int result = new Solution().minimumTrees(input0);
            System.out.println("Output:\n" + executor.toString(result));
        }
    }

}
    
